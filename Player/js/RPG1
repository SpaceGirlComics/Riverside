// game specific global functions and variables
// Â© 2015 spacegirl.net
// April 15, 2015 - initial submit

window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

// the game object (defined in game.js)
var g = new Game();
requestAnimationFrame(g.update);

// used to get key presses
keys = [];

// the players character on screen (defined in Character.js)
var player = new Character();

// used for controlling the mouse or tablet (defined in waypoint.js)
var wp = new Waypoint();

// im not going to decrib the event functions, they're pretty self evident
function onMouseDown(_e, _t)
{
	wp.setActive(true);
	wp.setPinned(true);
	wp.setX((_e.clientX - _t.getBoundingClientRect().left)-g.getMap().getDX());
	wp.setY((_e.clientY - _t.getBoundingClientRect().top)-g.getMap().getDY());
}

function onMouseUp(_e, _t)
{
	wp.setPinned(false);
}

function onMouseOut(_e, _t)
{
	wp.setPinned(false);
}

function onMouseMove(_e, _t)
{
	if(wp.isPinned())
	{
		wp.setX((_e.clientX - _t.getBoundingClientRect().left)-g.getMap().getDX());
		wp.setY((_e.clientY - _t.getBoundingClientRect().top)-g.getMap().getDY());
		//wp.setX(_e.clientX - _t.getBoundingClientRect().left);
		//wp.setY(_e.clientY - _t.getBoundingClientRect().top);
	}
}

function showConsole()
{
	var c = document.getElementById("cons");
	
	if(c.style.display == "none")
	{
		c.style.display = "block";
		c.style.opacity = 1.0;
		c.style.top= "-100px";
		document.getElementById("com").focus();
		//c.className = "console VisCons";
	}
	else
	{
		c.style.display = "none";
		c.style.opacity = 0.0;
		c.style.top= "-70px";
		document.getElementById("com").blur();
		//c.className = "console";
	}
}

function onKeyUp(_e)
{
	//keys[_e.keyCode] = false;
	//player.setState(1);
	if(_e.keyCode == 13)
	{
		if(document.getElementById("com") == document.activeElement)
		{
			command();
		}
	}
	if(_e.keyCode == 192)
	{
		showConsole();
	}
	player.sendMessage(1, 0, _e.keyCode);
}

function onKeyDown(_e)
{
	//keys[_e.keyCode] = true;
	player.sendMessage(0, 0, _e.keyCode);
	wp.setActive(false);
}

// decodes run length encoded arrays
function type1RLD(_rletiles)
{
	var tiles = [];
	for(x = 0; x < _rletiles.length; x++)
	{
		if(_rletiles[x] < 0)
		{
			for(var y = _rletiles[x]; y<0; y++)
			{
				tiles.push(_rletiles[x+1]);
			}
			x++;
		}
		else
		{
			tiles.push(_rletiles[x]);
		}
	}
	return(tiles);
}

// decodes in line command arrays
function type2RLD(_rletiles)
{
	var tiles = [];
	for(x = 0; x < _rletiles.length; x++)
	{
		switch(_rletiles[x])
		{
			case -1:
			{
				x++;
				for(var y = _rletiles[x]; y>0; y--)
				{
					tiles.push(_rletiles[x+1]);
				}
				x++;
				break;
			}
			
			default:
			{
				tiles.push(_rletiles[x]);
			}
		}
	}
	return(tiles);
}
